<head>
  <style>
    /* Remove the arrows in Webkit-based browsers (Chrome, Safari, etc.) */
    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    /* Remove the arrows in Firefox */
    input[type="number"] {
      -moz-appearance: textfield;
    }
    input[type="number"]::before {
  content: '$';
  position: absolute;
  left: 10px; /* Đảm bảo ký hiệu $ nằm ở vị trí đúng */
  top: 50%;
  transform: translateY(-50%);
  color: #888; /* Màu sắc của ký hiệu $ */
}
    /* Style the range input thumbs (slider handles) */
input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent; /* Transparent track to only show custom progress bar */
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 16px;
  height: 16px;
  background-color: #4f75ff; /* Blue color for the thumb */
  border-radius: 50%;
  cursor: pointer;
  margin-top: -7px; /* Centers the thumb on the progress bar */
}

input[type="range"]::-moz-range-thumb {
  width: 16px;
  height: 16px;
  background-color: #4f75ff;
  border-radius: 50%;
  cursor: pointer;
}

input[type="range"]::-webkit-slider-runnable-track {
  height: 4px; /* Make the track narrow */
}

input[type="range"]::-moz-range-track {
  height: 4px;
}


  </style>
</head>
<body class="bg-gray-100 font-sans">
      <main class="mx-4 md:mx-10 lg:mx-20 p-6">
        <div class="mb-12">
            <div class="grid grid-cols-5 gap-6">
                <div class="col-span-4">
                    <h2 class="text-4xl lg:text-6xl font-bold text-left">Our Courses</h2>
                    <p class="text-gray-600 mt-2">
                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Nobis praesentium voluptatum reiciendis aspernatur et nam aliquam iure non enim numquam exercitationem, quod dolore est id quo repudiandae! Repellendus, voluptatibus. Quae.
                    </p>
                </div>
            </div>
        </div>
         <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-7xl p-6 mb-6 bg-white rounded-lg shadow-lg">
        <div class="flex flex-col mb-4">
    <label for="topic" class="mb-1 text-sm text-gray-600">Topic</label>
    <div class="relative ">
      <!-- Selected Items -->
      <div
        id="selected-topic"
        class="flex flex-wrap gap-2 px-3 py-2 border rounded-full bg-white text-sm cursor-pointer"
        onclick="toggleDropdown('topic')"
      >
        <span class="text-gray-400">All topics</span>
        <svg class="w-4 h-4 ml-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
      </div>
        
      <!-- Dropdown -->
      <div
        id="dropdown-topic"
        class="absolute z-50 w-full bg-white border rounded shadow-lg hidden max-h-48 overflow-y-auto"
      >
        <div
          class="px-4 py-2 cursor-pointer hover:bg-gray-100"
          onclick="toggleSelection('Web Development', 'topic')"
        >
          Web Development
        </div>
        <div
          class="px-4 py-2 cursor-pointer hover:bg-gray-100"
          onclick="toggleSelection('Data Science', 'topic')"
        >
          Data Science
        </div>
        <div
          class="px-4 py-2 cursor-pointer hover:bg-gray-100"
          onclick="toggleSelection('Machine Learning', 'topic')"
        >
          Machine Learning
        </div>
      </div>
      <div id="topic-tags" class="mt-2 flex flex-wrap gap-2"></div>
    </div>
  </div>

<!-- Price Range Section -->
<div class="flex flex-col mb-4">
  <label for="price" class="mb-1 text-sm text-gray-600">Price</label>
  <div class="relative">
    <!-- Selected Items -->
    <div
      id="selected-price"
      class="flex flex-wrap gap-2 px-3 py-2 border rounded-full bg-white text-sm cursor-pointer"
      onclick="toggleDropdown('price')"
    >
      <span class="text-gray-400">All prices</span>
      <svg class="w-4 h-4 ml-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>

    <!-- Dropdown -->
    <div
      id="dropdown-price"
      class="absolute z-50 w-full bg-white border rounded shadow-lg hidden max-h-64 overflow-y-auto p-4"
    >
      <!-- Min and Max Price Inputs -->
      <div class="flex items-center justify-between mb-4">
  <!-- Đảm bảo các dấu $ luôn hiển thị -->
<div class="flex items-center space-x-2">
  <span class="text-sm">Min</span>
  <div class="relative">
     <div class="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-500 pointer-events-none">
      $
    </div>
    <input
      id="minPrice"
      type="number"
      class="w-20 pl-6 h-8 text-center text-sm border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4f75ff]"
      value="2500"
    />
  </div>
</div>

  <span class="text-xl">-</span>
  <div class="flex items-center space-x-2">
    <span class="text-sm">Max</span>
    <div class="relative">
       <div class="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-500 pointer-events-none">
      $
    </div>
      <input
        id="maxPrice"
        type="number"
        class="w-20 pl-6 h-8 text-center text-sm border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4f75ff]"
        value="7500"
      />
    </div>
  </div>
</div>

      <div class="relative mb-4">
  <!-- Progress Bar (higher z-index) -->
 <div class="absolute h-1 rounded-full top-1/2 transform -translate-y-1/2 w-full z-10 bg-gray-300">
    <div id="progress" class="absolute h-full bg-[#4f75ff] rounded-full"></div>
  </div>


  <!-- Range Inputs (lower z-index) -->
  <div class="relative">
    <input
      id="minRange"
      type="range"
      class="range-input range-min absolute w-full h-1 top-0 z-10"
      min="0"
      max="10000"
      value="2500"
      step="100"
    />
    <input
      id="maxRange"
      type="range"
      class="range-input range-max absolute w-full h-1 top-0 z-10"
      min="0"
      max="10000"
      value="7500"
      step="100"
    />
  </div>
</div>
    </div>
    </div>
</div>




  <!-- Multiselect Dropdown for Level -->
  <div class="flex flex-col mb-4">
  <label for="level" class="mb-1 text-sm text-gray-600">Level</label>
  <div class="relative">
    <!-- Selected Items -->
    <div
      id="selected-level"
      class="flex items-center gap-2 px-3 py-2 border rounded-full bg-white text-sm cursor-pointer"
      onclick="toggleDropdown('level')"
    >
      <span id="selected-level-text" class="text-gray-400">All levels</span>
      <svg class="w-4 h-4 ml-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </div>

    <!-- Dropdown -->
    <div
      id="dropdown-level"
      class="absolute z-50 w-full bg-white border rounded shadow-lg hidden max-h-48 overflow-y-auto"
    >
      <label class="flex items-center px-4 py-2 cursor-pointer hover:bg-gray-100">
        <input
          type="checkbox"
          value="Beginner"
          class="form-checkbox text-blue-500 mr-2"
          onchange="toggleCheckboxSelection(this, 'level')"
        />
        Beginner
      </label>
      <label class="flex items-center px-4 py-2 cursor-pointer hover:bg-gray-100">
        <input
          type="checkbox"
          value="Intermediate"
          class="form-checkbox text-blue-500 mr-2"
          onchange="toggleCheckboxSelection(this, 'level')"
        />
        Intermediate
      </label>
      <label class="flex items-center px-4 py-2 cursor-pointer hover:bg-gray-100">
        <input
          type="checkbox"
          value="Advanced"
          class="form-checkbox text-blue-500 mr-2"
          onchange="toggleCheckboxSelection(this, 'level')"
        />
        Advanced
      </label>
    </div>
    <div id="level-tags" class="mt-2 flex flex-wrap gap-2"></div>
  </div>
</div>


  <!-- Multiselect Dropdown for Skill -->
  <div class="flex flex-col mb-4">
    <label for="skill" class="mb-1 text-sm text-gray-600">SkillGain</label>
    <div class="relative">
      <!-- Selected Items -->
      <div
        id="selected-skill"
        class="flex flex-wrap gap-2 px-3 py-2 border rounded-full bg-white text-sm cursor-pointer"
        onclick="toggleDropdown('skill')"
      >
        <span class="text-gray-400">Any skill</span>
        <svg class="w-4 h-4 ml-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
      </div>

      <!-- Dropdown -->
      <div
        id="dropdown-skill"
        class="absolute z-50 w-full bg-white border rounded shadow-lg hidden max-h-48 overflow-y-auto"
      >
        <div
          class="px-4 py-2 cursor-pointer hover:bg-gray-100"
          onclick="toggleSelection('Programming', 'skill')"
        >
          Programming
        </div>
        <div
          class="px-4 py-2 cursor-pointer hover:bg-gray-100"
          onclick="toggleSelection('Design', 'skill')"
        >
          Design
        </div>
      </div>
      <div id="skill-tags" class="mt-2 flex flex-wrap gap-2"></div>
    </div>
  </div>
         </div>

        <!-- Course Cards -->
        <div id="course-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {{#each courses}}
            <div class="bg-white rounded-lg shadow-lg overflow-hidden flex flex-col">
    <img src="{{this.Img}}" alt="{{this.Title}}" class="w-full h-72 object-cover" />
    <div class="p-6 flex-grow">
        <div class="flex items-center text-sm text-gray-500 mb-2">
            <div class="mr-2 border border-slate-300 rounded-md inline-block py-0.5 px-2">{{this.Duration}} hours</div> | 
            <span class="ml-2 border border-slate-300 rounded-md inline-block py-0.5 px-2">{{this.Level}}</span>
        </div>
        <h3 class="text-xl font-semibold">{{this.Title}}</h3>
        <p class="text-gray-400 text-sm mt-2">{{this.Description}}</p>
    </div>
    <div class="grid grid-cols-2 gap-2 mt-auto mb-3 p-3">
        <button class="mt-4 w-full bg-gray-100 text-black py-2 rounded-md">Get it Now</button>
        <button id="seeMore-btn" class="mt-4 w-full bg-gray-100 text-black py-2 rounded-md" onclick="window.location.href='../CourseDetailPage/CourseDetailPage.html?courseId={{this._id}}'">See detail</button>
    </div>
</div>

            {{/each}}
        </div>

        <!-- Pagination -->
        <div class="flex justify-center mt-8 space-x-4">
            <button id="prev-btn" class="px-4 py-2 bg-gray-800 text-white rounded-md {{#if isFirstPage}}disabled:bg-gray-300 text-gray-700{{/if}}" onclick="window.location.href='courses?page={{prevPage}}'" {{#if isFirstPage}}disabled{{/if}}>Previous</button>
            <div id="page-info" class="text-gray-700 font-medium inline-block relative top-2">Page {{currentPage}} of {{totalPages}}</div>
            <button id="next-btn" class="px-4 py-2 bg-gray-800 text-white rounded-md {{#if isLastPage}}disabled:bg-gray-300 text-gray-700{{/if}}" onclick="window.location.href='courses?page={{nextPage}}'" {{#if isLastPage}}disabled{{/if}}>Next</button>
        </div>
    </main>
    <script>
// Đối tượng lưu các mục đã chọn
const selectedItems = {
  topic: [],
  price: [],
  level: [],
  skill: [],
};

// Theo dõi dropdown hiện tại
let activeDropdown = null;

// Hàm mở/đóng dropdown
function toggleDropdown(field) {
  const dropdown = document.getElementById(`dropdown-${field}`);

  if (activeDropdown && activeDropdown !== dropdown) {
    activeDropdown.classList.add("hidden");
  }

  // Kiểm tra xem dropdown có đang mở không
  const isHidden = dropdown.classList.contains("hidden");
  // Đóng tất cả dropdown khác
  document.querySelectorAll('.dropdown').forEach(item => item.classList.add("hidden"));
  // Nếu dropdown đang ẩn thì mở nó, nếu đã mở thì ẩn đi
  if (isHidden) {
    dropdown.classList.remove("hidden");
    activeDropdown = dropdown;
  } else {
    dropdown.classList.add("hidden");
    activeDropdown = null;
  }
}
window.addEventListener('DOMContentLoaded', (event) => {
  updateSliderProgress(); // Đảm bảo tiến độ thanh range được cập nhật khi trang được tải
});
// Hàm xử lý khi chọn một item từ dropdown
function toggleSelection(item, field) {
  const selectedContainer = document.getElementById(`${field}-tags`);
  const dropdown = document.getElementById(`dropdown-${field}`);

  // Kiểm tra nếu item đã được chọn
  if (selectedItems[field].includes(item)) {
    selectedItems[field] = selectedItems[field].filter((i) => i !== item);
  } else {
    selectedItems[field].push(item);
  }

  // Cập nhật giao diện
  updateTags(selectedContainer, field);

  // Đóng dropdown
  dropdown.classList.add("hidden");
}

// Hàm cập nhật thẻ (tags)
function updateTags(container, field) {
  container.innerHTML = ""; // Xóa các tag cũ

  if (selectedItems[field].length === 0) {
    const span = document.createElement("span");
    container.appendChild(span);
  } else {
    selectedItems[field].forEach((item) => {
      const tag = document.createElement("span");
      tag.className =
        "px-2 py-1 bg-[#4f75ff] text-white rounded-full flex items-center";
      tag.innerHTML = `${item} <button class="ml-2" onclick="removeSelection('${item}', '${field}')">&times;</button>`;
      container.appendChild(tag);
    });
  }
}

// Hàm xử lý khi xóa một tag
function removeSelection(item, field) {
  selectedItems[field] = selectedItems[field].filter((i) => i !== item);
  const container = document.getElementById(`${field}-tags`);
  updateTags(container, field);
}

// Hàm xử lý với checkbox
function toggleCheckboxSelection(checkbox, field) {
  const selectedContainer = document.getElementById(`${field}-tags`);

  if (checkbox.checked) {
    selectedItems[field].push(checkbox.value);
  } else {
    selectedItems[field] = selectedItems[field].filter(
      (item) => item !== checkbox.value
    );
  }

  // Cập nhật giao diện
  updateTags(selectedContainer, field);
}

// Ẩn dropdown khi nhấp ra ngoài
window.addEventListener("click", (e) => {
  // Kiểm tra xem người dùng có nhấn ngoài các dropdown không
  if (!e.target.closest('.relative') && activeDropdown) {
    activeDropdown.classList.add("hidden");
    activeDropdown = null;
  }
});

// Lấy các phần tử cần thiết
const minPriceInput = document.getElementById("minPrice");
const maxPriceInput = document.getElementById("maxPrice");
const minRangeInput = document.getElementById("minRange");
const maxRangeInput = document.getElementById("maxRange");
const progress = document.getElementById("progress");

// Cập nhật giá trị của input khi người dùng kéo thanh range
minRangeInput.addEventListener("input", function() {
  // Nếu min vượt quá max, điều chỉnh min bằng max - 100
  if (parseInt(minRangeInput.value) >= parseInt(maxRangeInput.value)) {
    minRangeInput.value = maxRangeInput.value - 100; // Khoảng cách tối thiểu là 100
  }
  minPriceInput.value = minRangeInput.value; // Cập nhật giá trị minPrice
  updateSliderProgress(); // Cập nhật thanh tiến độ
});

maxRangeInput.addEventListener("input", function() {
  // Nếu max nhỏ hơn min, điều chỉnh max bằng min + 100
  if (parseInt(maxRangeInput.value) <= parseInt(minRangeInput.value)) {
    maxRangeInput.value = parseInt(minRangeInput.value) + 100; // Khoảng cách tối thiểu là 100
  }
  maxPriceInput.value = maxRangeInput.value; // Cập nhật giá trị maxPrice
  updateSliderProgress(); // Cập nhật thanh tiến độ
});

// Hàm cập nhật tiến độ của thanh range
function updateSliderProgress() {
  const min = parseInt(minRangeInput.value, 10);
  const max = parseInt(maxRangeInput.value, 10);
  const minPercentage = (min / maxRangeInput.max) * 100;
  const maxPercentage = (max / maxRangeInput.max) * 100;

  // Cập nhật thanh tiến độ
  progress.style.left = `${minPercentage}%`;
  progress.style.right = `${100 - maxPercentage}%`;
  
}





  </script>
</body>
